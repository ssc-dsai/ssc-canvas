import { type ClientConfig } from "../client.js";
import type { Command, DisconnectMode, MultitaskStrategy, OnCompletionBehavior } from "../types.js";
import type { Message } from "../types.messages.js";
import type { Checkpoint, Config, Metadata, ThreadState } from "../schema.js";
import type { CustomStreamEvent, MetadataStreamEvent, StreamMode, UpdatesStreamEvent } from "../types.stream.js";
export type MessageMetadata<StateType extends Record<string, unknown>> = {
    messageId: string;
    firstSeenState: ThreadState<StateType> | undefined;
    branch: string | undefined;
    branchOptions: string[] | undefined;
};
export declare function useStream<StateType extends Record<string, unknown> = Record<string, unknown>, UpdateType extends Record<string, unknown> = Partial<StateType>, CustomType = unknown>(options: {
    assistantId: string;
    apiUrl: ClientConfig["apiUrl"];
    apiKey?: ClientConfig["apiKey"];
    withMessages?: string;
    onError?: (error: unknown) => void;
    onFinish?: (state: ThreadState<StateType>) => void;
    onUpdateEvent?: (data: UpdatesStreamEvent<UpdateType>["data"]) => void;
    onCustomEvent?: (data: CustomStreamEvent<CustomType>["data"]) => void;
    onMetadataEvent?: (data: MetadataStreamEvent["data"]) => void;
    threadId?: string | null;
    onThreadId?: (threadId: string) => void;
}): {
    readonly values: StateType;
    error: unknown;
    isLoading: boolean;
    stop: () => void;
    submit: (values: UpdateType | undefined, submitOptions?: {
        config?: Config;
        checkpoint?: Omit<Checkpoint, "thread_id"> | null;
        command?: Command;
        interruptBefore?: "*" | string[];
        interruptAfter?: "*" | string[];
        metadata?: Metadata;
        multitaskStrategy?: MultitaskStrategy;
        onCompletion?: OnCompletionBehavior;
        onDisconnect?: DisconnectMode;
        feedbackKeys?: string[];
        streamMode?: Array<StreamMode>;
        optimisticValues?: Partial<StateType> | ((prev: StateType) => Partial<StateType>);
    }) => Promise<void>;
    setBranch: (path: string) => void;
    readonly messages: Message[];
    getMessagesMetadata(message: Message, index?: number): MessageMetadata<StateType> | undefined;
};
